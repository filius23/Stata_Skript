[
["adva.html", "11 Fortgeschrittene Themen 11.1 Wertelabels 11.2 sortieren 11.3 Indikatoren umdrehen 11.4 Informationen aus mehreren Variablen 11.5 Informationen aus mehreren Datensätzen 11.6 Arbeiten mit Textvariablen 11.7 egen 11.8 gruppierte Berechnungen 11.9 collapse", " 11 Fortgeschrittene Themen 11.1 Wertelabels Wertelabels helfen, Informationen aus dem Codebuch direkt im Datensatz abzulegen und so das arbeiten zu erleichtern. Während Stata-Datensätze häufig mit Labels geliefert werden, müssen wir bei neu erstellten Variablen diese Labels selbst erstellen. Bspw. wenn wir aus der Altersvariable des Allbus 2018 eine neue Altersgruppen-Variable erstellen: egen age_cat = cut(age), at( 18 35 60 100 ) tabulate age_cat age_cat | Freq. Percent Cum. ------------+----------------------------------- 18 | 718 20.68 20.68 35 | 1,527 43.98 64.66 60 | 1,227 35.34 100.00 ------------+----------------------------------- Total | 3,472 100.00 Um age_cat besser zu beschriften definieren wir ein Wertelabel. Dazu verwenden wir label define, gefolgt von einem Objektnamen für dieses Label (hier age_cat_lab) und dann jeweils die Ausprägungen zusammen mit dem entsprechenden label in \"\". Dieses Label-Objekt wenden wir dann mit label values auf die Variable age_cat an: label define age_cat_lab 18 &quot;18-34 Jahre&quot; 35 &quot;35-29 Jahre&quot; 60 &quot;über 60 Jahre&quot; label values age_cat age_cat_lab tab age_cat age_cat | Freq. Percent Cum. --------------+----------------------------------- 18-34 Jahre | 718 20.68 20.68 35-29 Jahre | 1,527 43.98 64.66 über 60 Jahre | 1,227 35.34 100.00 --------------+----------------------------------- Total | 3,472 100.00 Wir können außerdem mit label variable \"Beschreibung\" die Variable selbst beschriften, um sie so leichter auffindbar zu machen describe age_cat storage display value variable name type format label variable label -------------------------------------------------------------------------------- age_cat float %9.0g label variable age_cat &quot;3er Alterseinteilung&quot; zB. wird dieses Label mit lookfor gefunden: lookfor &quot;Alters&quot; storage display value variable name type format label variable label -------------------------------------------------------------------------------- age_cat float %13.0g age_cat_lab 3er Alterseinteilung 11.2 sortieren sort 11.3 Indikatoren umdrehen 11.4 Informationen aus mehreren Variablen Manchmal liegt die gewünschte Information nur aufgeteilt auf mehrere Variablen vor. Ein Beispiel hierfür ist die Alterskonstellation von (Ehe-)Paaren. Im Allbus werden sowohl das Alter der Befragten (age) als auch (ggf.) das Alter der*des Partner*in abgefragt. Zudem unterscheidet der Allbus zwischen Lebens- (page) und Ehepartner*innen (scage). Möchten wir jetzt die jeweils den Altersabstand zwischen dem Alter der männlichen und weiblichen (Ehe-)Partner berechnen1, so müssen wir durch eine Kombination aus gen und replace in mehreren Schritten vorgehen. set linesize 120 cd &quot;&quot; use &quot;Allbus_1980-2018.dta&quot;, clear // missings ausschließen: replace mstat = . if mstat &lt; 0 mvdecode *yborn, mv( -41 -32 -10 -9 -7 -8 -6 -5 -4 -3 -1 ) mvdecode *age, mv( -41 -32 -10 -9 -7 -8 -6 -5 -4 -3 -1 ) mvdecode *educ, mv( -41 -32 -10 -9 -7 -8 -6 -5 -4 -3 -1 ) // Alter von ihr: entweder Befragtenalter wenn sie befragt wurde oder gen her_age = age if sex == 2 // scage wenn *er* befragt wurde und verheiratet ist -&gt; ihr Alter ist in scage replace her_age = scage if sex == 1 &amp; mstat == 1 // üage *er* befragt wurde und unverheiratet ist -&gt; ihr Alter ist in page replace her_age = page if sex == 1 &amp; mstat != 1 // Alter von ihm: entweder Befragtenalter wenn er befragt wurde oder gen his_age = age if sex == 1 // scage wenn *sie* befragt wurde und verheiratet ist -&gt; ihr Alter ist in scage replace his_age = scage if sex == 2 &amp; mstat == 1 // page wenn *sie* befragt wurde und verheiratet ist -&gt; ihre Alter ist in scage replace his_age = page if sex == 2 &amp; mstat != 1 gen age_diff = his_age - her_age if !missing(his_age) &amp; !missing(her_age) su age_diff 11.5 Informationen aus mehreren Datensätzen merge 11.6 Arbeiten mit Textvariablen substr regexr regexm 11.7 egen egen ist die Erweiterung von gen und gibt uns die Möglichkeit, eine ganze Reihe von Berechnungen durchzuführen. 11.8 gruppierte Berechnungen bys agec: egen mean_inc = mean(inc) list agec mean_inc in 1/10 11.9 collapse Manchmal möchten wir vielleicht nur einen Mittelwert pro Gruppe und die einzelnen Werte interessieren uns gar nicht. Wir möchten unseren Datensatz also verkürzen, sodass er lediglich einen Wert pro Gruppe enthält. Dazu Diese Beispiel bezieht sich also nur auf heterosexuelle Paare.↩︎ "]
]
